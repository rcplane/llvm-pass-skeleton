; ModuleID = 'array_alloc_print.c'
source_filename = "array_alloc_print.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx13.0.0"

@.str = private unnamed_addr constant [37 x i8] c"Memory allocation failed for row %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @main() #0 {
  %1 = alloca [5 x ptr], align 8
  br label %2

2:                                                ; preds = %16, %0
  %3 = phi i32 [ 0, %0 ], [ %17, %16 ]
  %4 = icmp slt i32 %3, 5
  br i1 %4, label %5, label %18

5:                                                ; preds = %2
  %6 = call ptr @malloc(i64 noundef 40) #4
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds [5 x ptr], ptr %1, i64 0, i64 %7
  store ptr %6, ptr %8, align 8
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds [5 x ptr], ptr %1, i64 0, i64 %9
  %11 = load ptr, ptr %10, align 8
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %5
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %3)
  call void @exit(i32 noundef 1) #5
  unreachable

15:                                               ; preds = %5
  br label %16

16:                                               ; preds = %15
  %17 = add nsw i32 %3, 1
  br label %2, !llvm.loop !5

18:                                               ; preds = %2
  br label %19

19:                                               ; preds = %37, %18
  %20 = phi i32 [ %25, %37 ]
  %21 = phi i32 [ 0, %18 ], [ %38, %37 ]
  %22 = icmp slt i32 %21, 5
  br i1 %22, label %23, label %39

23:                                               ; preds = %19
  br label %24

24:                                               ; preds = %34, %23
  %25 = phi i32 [ 0, %23 ], [ %35, %34 ]
  %26 = icmp slt i32 %25, 10
  br i1 %26, label %27, label %36

27:                                               ; preds = %24
  %28 = mul nsw i32 %21, %25
  %29 = sext i32 %21 to i64
  %30 = getelementptr inbounds [5 x ptr], ptr %1, i64 0, i64 %29
  %31 = load ptr, ptr %30, align 8
  %32 = sext i32 %25 to i64
  %33 = getelementptr inbounds i32, ptr %31, i64 %32
  store i32 %28, ptr %33, align 4
  br label %34

34:                                               ; preds = %27
  %35 = add nsw i32 %25, 1
  br label %24, !llvm.loop !7

36:                                               ; preds = %24
  br label %37

37:                                               ; preds = %36
  %38 = add nsw i32 %21, 1
  br label %19, !llvm.loop !8

39:                                               ; preds = %19
  br label %40

40:                                               ; preds = %60, %39
  %41 = phi i32 [ %46, %60 ]
  %42 = phi i32 [ 0, %39 ], [ %61, %60 ]
  %43 = icmp slt i32 %42, 5
  br i1 %43, label %44, label %62

44:                                               ; preds = %40
  br label %45

45:                                               ; preds = %56, %44
  %46 = phi i32 [ 0, %44 ], [ %57, %56 ]
  %47 = icmp slt i32 %46, 10
  br i1 %47, label %48, label %58

48:                                               ; preds = %45
  %49 = sext i32 %42 to i64
  %50 = getelementptr inbounds [5 x ptr], ptr %1, i64 0, i64 %49
  %51 = load ptr, ptr %50, align 8
  %52 = sext i32 %46 to i64
  %53 = getelementptr inbounds i32, ptr %51, i64 %52
  %54 = load i32, ptr %53, align 4
  %55 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %54)
  br label %56

56:                                               ; preds = %48
  %57 = add nsw i32 %46, 1
  br label %45, !llvm.loop !9

58:                                               ; preds = %45
  %59 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  br label %60

60:                                               ; preds = %58
  %61 = add nsw i32 %42, 1
  br label %40, !llvm.loop !10

62:                                               ; preds = %40
  br label %63

63:                                               ; preds = %70, %62
  %64 = phi i32 [ 0, %62 ], [ %71, %70 ]
  %65 = icmp slt i32 %64, 5
  br i1 %65, label %66, label %72

66:                                               ; preds = %63
  %67 = sext i32 %64 to i64
  %68 = getelementptr inbounds [5 x ptr], ptr %1, i64 0, i64 %67
  %69 = load ptr, ptr %68, align 8
  call void @free(ptr noundef %69)
  br label %70

70:                                               ; preds = %66
  %71 = add nsw i32 %64, 1
  br label %63, !llvm.loop !11

72:                                               ; preds = %63
  ret i32 0
}

; Function Attrs: allocsize(0)
declare ptr @malloc(i64 noundef) #1

declare i32 @printf(ptr noundef, ...) #2

; Function Attrs: noreturn
declare void @exit(i32 noundef) #3

declare void @free(ptr noundef) #2

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #1 = { allocsize(0) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #2 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #3 = { noreturn "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #4 = { allocsize(0) }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.1"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !6}
!10 = distinct !{!10, !6}
!11 = distinct !{!11, !6}
